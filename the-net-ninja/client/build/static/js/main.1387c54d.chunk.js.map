{"version":3,"sources":["queries/queries.js","components/BookList.js","components/AddBook.js","App.js","reportWebVitals.js","index.js"],"names":["getBooksQuery","gql","getAuthorsQuery","addBookMutationQuery","BookList","id","useQuery","loading","error","data","books","map","book","index","name","DisplayBooks","AddBook","useState","genre","authorId","formData","setFormData","onChange","e","target","value","useMutation","addBook","onSubmit","preventDefault","console","log","variables","refetchQueries","query","className","type","authors","author","DisplayAuthors","client","ApolloClient","uri","cache","InMemoryCache","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6qBAEA,IAAMA,EAAgBC,cAAH,KASbC,EAAkBD,cAAH,KASfE,EAAuBF,cAAH,KCCXG,EAjBE,WAUf,OACE,8BACE,oBAAIC,GAAG,YAAP,SAXiB,WAAO,IAAD,EACQC,mBAASN,GAAlCO,EADiB,EACjBA,QAASC,EADQ,EACRA,MAAOC,EADC,EACDA,KACxB,OAAIF,EAAgB,2CAChBC,EAAc,2DACXC,EAAKC,MAAMC,KAAI,SAACC,EAAMC,GAC3B,OAAO,6BAAiBD,EAAKE,MAAbD,MAMIE,Q,wBCwDXC,EAhEC,WACd,IADoB,EAcYC,mBAAS,CACvCH,KAAM,GACNI,MAAO,GACPC,SAAU,KAjBQ,mBAcbC,EAda,KAcHC,EAdG,KAmBZP,EAA0BM,EAA1BN,KAAMI,EAAoBE,EAApBF,MAAOC,EAAaC,EAAbD,SAEfG,EAAW,SAACC,GAChBF,EAAY,2BAAKD,GAAN,kBAAiBG,EAAEC,OAAOV,KAAOS,EAAEC,OAAOC,UAtBnC,EAyBFC,sBAAYvB,GAAvBwB,EAzBa,oBAqCpB,OACE,uBAAMtB,GAAG,WAAWuB,SAZL,SAACL,GAChBA,EAAEM,iBADoB,IAEdf,EAA0BM,EAA1BN,KAAMI,EAAoBE,EAApBF,MAAOC,EAAaC,EAAbD,SACrBW,QAAQC,IAAIX,GACZO,EAAQ,CACNK,UAAW,CAAElB,KAAMA,EAAMI,MAAOA,EAAOC,SAAUA,GACjDc,eAAgB,CAAC,CAAEC,MAAOlC,MAE5BqB,EAAY,CAAEP,KAAM,GAAII,MAAO,GAAIC,SAAU,MAI7C,UACE,sBAAKgB,UAAU,QAAf,UACE,+CACA,uBAAOC,KAAK,OAAOtB,KAAK,OAAOW,MAAOX,EAAMQ,SAAUA,OAExD,sBAAKa,UAAU,QAAf,UACE,2CACA,uBACEC,KAAK,OACLtB,KAAK,QACLW,MAAOP,EACPI,SAAUA,OAGd,sBAAKa,UAAU,QAAf,UACE,4CACA,yBAAQrB,KAAK,WAAWW,MAAON,EAAUG,SAAUA,EAAnD,UACE,mDAtDe,WAAO,IAAD,EACIhB,mBAASJ,GAAlCK,EADqB,EACrBA,QAASC,EADY,EACZA,MAAOC,EADK,EACLA,KACtB,OAAIF,EAAgB,gDAChBC,EAAc,2DACXC,EAAK4B,QAAQ1B,KAAI,SAAC2B,GACvB,OACE,wBAAwBb,MAAOa,EAAOjC,GAAtC,SACGiC,EAAOxB,MADGwB,EAAOjC,OAiDjBkC,SAGL,2CC/DAC,EAAS,IAAIC,eAAa,CAC9BC,IAAK,gCACLC,MAAO,IAAIC,kBAeEC,MAZf,WACE,OACE,cAAC,iBAAD,CAAgBL,OAAQA,EAAxB,SACE,sBAAKnC,GAAG,OAAR,UACE,sDACA,cAAC,EAAD,IACA,cAAC,EAAD,UCHOyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1387c54d.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nconst getBooksQuery = gql`\n  {\n    books {\n      name\n      id\n    }\n  }\n`;\n\nconst getAuthorsQuery = gql`\n  {\n    authors {\n      name\n      id\n    }\n  }\n`;\n\nconst addBookMutationQuery = gql`\n  mutation AddBook($name: String!, $genre: String!, $authorId: String!) {\n    addBook(name: $name, genre: $genre, authorId: $authorId) {\n      id\n      name\n    }\n  }\n`;\n\nexport { getAuthorsQuery, getBooksQuery, addBookMutationQuery };\n","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { getBooksQuery } from '../queries/queries';\n\nconst BookList = () => {\n  const DisplayBooks = () => {\n    const { loading, error, data } = useQuery(getBooksQuery);\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Ops! Something went wrong.</p>;\n    return data.books.map((book, index) => {\n      return <li key={index}>{book.name}</li>;\n    });\n  };\n\n  return (\n    <div>\n      <ul id='book-list'>{DisplayBooks()}</ul>\n    </div>\n  );\n};\n\nexport default BookList;\n","import React, { useState } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\nimport {\n  getAuthorsQuery,\n  addBookMutationQuery,\n  getBooksQuery,\n} from '../queries/queries';\n\nconst AddBook = () => {\n  const DisplayAuthors = () => {\n    let { loading, error, data } = useQuery(getAuthorsQuery);\n    if (loading) return <option>Loading...</option>;\n    if (error) return <p>Ops! Something went wrong.</p>;\n    return data.authors.map((author) => {\n      return (\n        <option key={author.id} value={author.id}>\n          {author.name}\n        </option>\n      );\n    });\n  };\n\n  const [formData, setFormData] = useState({\n    name: '',\n    genre: '',\n    authorId: '',\n  });\n  const { name, genre, authorId } = formData;\n\n  const onChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const [addBook] = useMutation(addBookMutationQuery);\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { name, genre, authorId } = formData;\n    console.log(formData);\n    addBook({\n      variables: { name: name, genre: genre, authorId: authorId },\n      refetchQueries: [{ query: getBooksQuery }],\n    });\n    setFormData({ name: '', genre: '', authorId: '' });\n  };\n\n  return (\n    <form id='add-book' onSubmit={onSubmit}>\n      <div className='field'>\n        <label>Book name:</label>\n        <input type='text' name='name' value={name} onChange={onChange}></input>\n      </div>\n      <div className='field'>\n        <label>Genre:</label>\n        <input\n          type='text'\n          name='genre'\n          value={genre}\n          onChange={onChange}\n        ></input>\n      </div>\n      <div className='field'>\n        <label>Author:</label>\n        <select name='authorId' value={authorId} onChange={onChange}>\n          <option>Select author</option>\n          {DisplayAuthors()}\n        </select>\n      </div>\n      <button>+</button>\n    </form>\n  );\n};\n\nexport default AddBook;\n","import { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport BookList from './components/BookList';\nimport AddBook from './components/AddBook';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql',\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div id='main'>\n        <h1>Ninja's Reading List</h1>\n        <BookList />\n        <AddBook></AddBook>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}